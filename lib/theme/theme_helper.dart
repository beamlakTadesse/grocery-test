import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:grocery/core/utils/pref_utils.dart';
import 'package:grocery/core/utils/size_utils.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              30,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.gray70003,
              width: 2,
            ),
            borderRadius: BorderRadius.circular(
              18,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          color: appTheme.gray40003,
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray10001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray40002,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            50,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            38,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900.withOpacity(0.6),
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: appTheme.yellow900,
          fontSize: getFontSize(
            9,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFDC44B),
    primaryContainer: Color(0X193B3B3B),
    secondary: Color(0X193B3B3B),
    secondaryContainer: Color(0XFFCACACA),
    tertiary: Color(0X193B3B3B),
    tertiaryContainer: Color(0XFFCACACA),

    // Background colors
    background: Color(0X193B3B3B),

    // Surface colors
    surface: Color(0X193B3B3B),
    surfaceTint: Color(0XFF2F2F2F),
    surfaceVariant: Color(0XFFCACACA),

    // Error colors
    error: Color(0XFF2F2F2F),
    errorContainer: Color(0XFFAAAAAA),
    onError: Color(0X3DFFFFFF),
    onErrorContainer: Color(0XFF191919),

    // On colors(text colors)
    onBackground: Color(0X3DFFFFFF),
    onInverseSurface: Color(0X3DFFFFFF),
    onPrimary: Color(0XFF2F2F2F),
    onPrimaryContainer: Color(0X3DFFFFFF),
    onSecondary: Color(0X3DFFFFFF),
    onSecondaryContainer: Color(0XFF2F2F2F),
    onTertiary: Color(0X3DFFFFFF),
    onTertiaryContainer: Color(0XFF2F2F2F),

    // Other colors
    outline: Color(0XFF2F2F2F),
    outlineVariant: Color(0X193B3B3B),
    scrim: Color(0X193B3B3B),
    shadow: Color(0XFF2F2F2F),

    // Inverse colors
    inversePrimary: Color(0X193B3B3B),
    inverseSurface: Color(0XFF2F2F2F),

    // Pending colors
    onSurface: Color(0X3DFFFFFF),
    onSurfaceVariant: Color(0XFF2F2F2F),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray400 => Color(0XFF898989);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray900 => Color(0XFF343434);

  // Gray
  Color get gray100 => Color(0XFFF5F7F8);
  Color get gray10001 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFF0F0F0);
  Color get gray20001 => Color(0XFFEFEFEF);
  Color get gray20002 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray30001 => Color(0XFFE5E5E5);
  Color get gray30002 => Color(0XFFDDDDDD);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFB1B1B1);
  Color get gray40002 => Color(0XFFAFAFAF);
  Color get gray40003 => Color(0XFFC9C9C9);
  Color get gray50 => Color(0XFFFAFEFC);
  Color get gray500 => Color(0XFF9C9F9E);
  Color get gray50001 => Color(0XFF94999B);
  Color get gray50002 => Color(0XFF919191);
  Color get gray50019 => Color(0X19918F8F);
  Color get gray5001 => Color(0XFFFAFAFA);
  Color get gray600 => Color(0XFF7C7C7C);
  Color get gray700 => Color(0XFF5E5E5E);
  Color get gray70000 => Color(0X005B5B5B);
  Color get gray70001 => Color(0XFF696565);
  Color get gray70002 => Color(0XFF696363);
  Color get gray70003 => Color(0XFF696464);
  Color get gray70004 => Color(0XFF616161);
  Color get gray70026 => Color(0X26696969);
  Color get gray800 => Color(0XFF384044);
  Color get gray80001 => Color(0XFF384144);
  Color get gray80002 => Color(0XFF474747);
  Color get gray900 => Color(0XFF41033D);

  // Green
  Color get green500 => Color(0XFF58A55C);
  Color get greenA700 => Color(0XFF12B669);

  // Pink
  Color get pink500 => Color(0XFFFF2D6C);

  // Purple
  Color get purple800 => Color(0XFF7A1E76);

  // Yellow
  Color get yellow900 => Color(0XFFE67F1E);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
